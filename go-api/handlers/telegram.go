package handlers

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
)

// TelegramUpdate ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
type TelegramUpdate struct {
    Message struct {
        Text  string `json:"text"`
        Voice *Voice `json:"voice,omitempty"`
        Audio *Audio `json:"audio,omitempty"`
        Chat  struct {
            ID int64 `json:"id"`
        } `json:"chat"`
        From struct {
            ID int64 `json:"id"`
        } `json:"from"`
    } `json:"message"`
}

type Voice struct {
    FileID       string `json:"file_id"`
    FileUniqueID string `json:"file_unique_id"`
    Duration     int    `json:"duration"`
    MimeType     string `json:"mime_type,omitempty"`
    FileSize     int    `json:"file_size,omitempty"`
}

type Audio struct {
    FileID       string `json:"file_id"`
    FileUniqueID string `json:"file_unique_id"`
    Duration     int    `json:"duration"`
    Performer    string `json:"performer,omitempty"`
    Title        string `json:"title,omitempty"`
    FileName     string `json:"file_name,omitempty"`
    MimeType     string `json:"mime_type,omitempty"`
    FileSize     int    `json:"file_size,omitempty"`
    Thumbnail    *Photo `json:"thumbnail,omitempty"`
}

type Photo struct {
    FileID       string `json:"file_id"`
    FileUniqueID string `json:"file_unique_id"`
    Width        int    `json:"width"`
    Height       int    `json:"height"`
    FileSize     int    `json:"file_size,omitempty"`
}

// TelegramHandler ‚Äî –±–∞–∑–æ–≤—ã–π HTTP-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è Telegram webhook
func TelegramHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        w.WriteHeader(http.StatusMethodNotAllowed)
        w.Write([]byte("–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"))
        return
    }

    var update TelegramUpdate
    if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ Telegram: %v", err)
        w.WriteHeader(http.StatusBadRequest)
        return
    }

    if update.Message.Text != "" {
        log.Printf("üì© –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", 
            update.Message.From.ID, update.Message.Text)
        fmt.Fprintf(w, "–ü—Ä–∏–Ω—è—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", update.Message.Text)
    } else if update.Message.Voice != nil {
        log.Printf("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —Ñ–∞–π–ª %s (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —Å–µ–∫)", 
            update.Message.From.ID, update.Message.Voice.FileID, update.Message.Voice.Duration)
        fmt.Fprintf(w, "–ü—Ä–∏–Ω—è—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", update.Message.Voice.FileID)
    } else if update.Message.Audio != nil {
        log.Printf("üéµ –ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —Ñ–∞–π–ª %s", 
            update.Message.From.ID, update.Message.Audio.FileID)
        fmt.Fprintf(w, "–ü—Ä–∏–Ω—è—Ç–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", update.Message.Audio.FileID)
    } else {
        log.Printf("‚ùì –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", 
            update.Message.From.ID)
        fmt.Fprintf(w, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
    }
}

