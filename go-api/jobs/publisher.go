package jobs

import (
    "context"
    "encoding/json"
    "fmt"

    "github.com/redis/go-redis/v9"
)

// Task ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
type Task struct {
    Type string      `json:"type"`
    Data interface{} `json:"data"`
}

// PublishTask –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ Redis-–æ—á–µ—Ä–µ–¥—å
func PublishTask(rdb *redis.Client, task Task) error {
    ctx := context.Background()

    payload, err := json.Marshal(task)
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: %w", err)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ pubsub –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    if err := rdb.LPush(ctx, "queue:tasks", payload).Err(); err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: %w", err)
    }

    fmt.Println("üì® –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Redis:", task.Type)
    return nil
}

