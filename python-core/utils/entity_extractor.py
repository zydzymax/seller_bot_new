"""
entity_extractor.py
üìå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—à–∏–≤).
"""

import re
from typing import Dict


def extract_lead_info(text: str) -> Dict[str, str]:
    """
    –í—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –ø—Ä–æ–¥—É–∫—Ç
    - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/–ø–∞—Ä—Ç–∏—è
    - —Ñ–æ—Ä–º–∞—Ç (–¥–∞–≤–∞–ª—å—á–µ—Å–∫–∏–π / –ø–æ–¥ –∫–ª—é—á)
    - –Ω–∞–ª–∏—á–∏–µ –¢–ó
    - –Ω–∞–ª–∏—á–∏–µ –ª–µ–∫–∞–ª
    - –º–∞—Ç–µ—Ä–∏–∞–ª (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    - –ø—Ä–∏–∑–Ω–∞–∫: –∑–Ω–∞–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª

    Args:
        text (str): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    result = {
        "product": None,
        "quantity": None,
        "format": None,
        "tech_spec": None,
        "patterns": None,
        "material": None,
        "material_known": None
    }

    text_lower = text.lower()

    # --- –ü—Ä–æ–¥—É–∫—Ç
    product_match = re.search(r"(–ø–∏–∂–∞–º[–∞–∏—ã]|—Ñ—É—Ç–±–æ–ª–∫[–∞–∏—ã]|–ª–æ–Ω–≥—Å–ª–∏–≤[–∞–∏—ã]|—à–æ—Ä—Ç[—ã–∞]|–±—Ä—é–∫[–∏–∞]|—Å–≤–∏—Ç—à–æ—Ç[—ã–∞])", text_lower)
    if product_match:
        result["product"] = product_match.group(1)

    # --- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ / –ø–∞—Ä—Ç–∏—è
    qty_match = re.search(r"(\d{2,5})\s?(—à—Ç|—à—Ç—É–∫|–µ–¥|–µ–¥–∏–Ω–∏—Ü|–ø–∞—Ä—Ç\w*)", text_lower)
    if qty_match:
        result["quantity"] = qty_match.group(1)

    # --- –§–æ—Ä–º–∞—Ç
    if "–ø–æ–¥ –∫–ª—é—á" in text_lower:
        result["format"] = "–ø–æ–¥ –∫–ª—é—á"
    elif "–¥–∞–≤–∞–ª—å—á–µ—Å–∫" in text_lower or "—Å–≤–æ—ë —Å—ã—Ä—å—ë" in text_lower:
        result["format"] = "–¥–∞–≤–∞–ª—å—á–µ—Å–∫–∏–π"

    # --- –¢–µ—Ö–∑–∞–¥–∞–Ω–∏–µ
    if re.search(r"(—Ç–µ—Ö\.?–∑–∞–¥–∞–Ω–∏[–µ—è]|—Ç–∑|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ)", text_lower):
        result["tech_spec"] = "–µ—Å—Ç—å"

    # --- –õ–µ–∫–∞–ª–∞
    if re.search(r"(–ª–µ–∫–∞–ª[–∞–æ–∏–µ]?|–≤—ã–∫—Ä–æ[–π–µ]–∫[–∞–∏]?)", text_lower):
        result["patterns"] = "–µ—Å—Ç—å"

    # --- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
    material_keywords = [
        "–∫—É–ª–∏—Ä", "—Ñ—É—Ç–µ—Ä", "–∏–Ω—Ç–µ—Ä–ª–æ–∫", "—Ä–∏–±–∞–Ω–∞", "–≤–∏—Å–∫–æ–∑–∞", "—Ö–ª–æ–ø–æ–∫", "–ø–æ–ª–∏—ç—Å—Ç–µ—Ä", "—ç–ª–∞—Å—Ç–∞–Ω",
        "–±–∏—Ñ–ª–µ–∫—Å", "—Ç—Ä–∏–∫–æ—Ç–∞–∂", "—Å–∏—Ç–µ—Ü", "–ø–æ–ø–ª–∏–Ω", "—Ç–∫–∞–Ω—å", "–º–∞—Ç–µ—Ä–∏–∞–ª", "—Ç—Ä–∏–∫–æ—Ç–∞–∂–Ω—ã–π"
    ]
    for word in material_keywords:
        if word in text_lower:
            result["material"] = word
            result["material_known"] = True
            break
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –Ω–æ —Ñ–æ—Ä–º–∞—Ç ‚Äî –¥–∞–≤–∞–ª—å—á–µ—Å–∫–∏–π ‚Üí –Ω–∞–¥–æ —É—Ç–æ—á–Ω—è—Ç—å
        if result["format"] == "–¥–∞–≤–∞–ª—å—á–µ—Å–∫–∏–π":
            result["material_known"] = False

    return result

