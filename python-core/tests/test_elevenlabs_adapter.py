"""
test_elevenlabs_adapter.py ‚Äî –¢–µ—Å—Ç—ã –¥–ª—è ElevenLabsAdapter

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Å –≥–æ–ª–æ—Å–æ–º "–ê–ª–µ–Ω–∞"
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ —Ñ–æ–ª–ª–±—ç–∫–∏
- Worker'—ã –∏ –æ—á–µ—Ä–µ–¥–∏
- VPN —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å

¬© SoVAni 2025
"""

import pytest
import asyncio
import aiohttp
from unittest.mock import Mock, patch, AsyncMock
import json
import tempfile
from pathlib import Path

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from adapters.elevenlabs_adapter import (
    ElevenLabsAdapter, TTSRequest, TTSResponse, ElevenLabsError,
    VoiceManager, AudioCache, create_elevenlabs_adapter
)


class TestVoiceManager:
    """–¢–µ—Å—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤"""
    
    def test_alena_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ –ê–ª–µ–Ω—ã"""
        config = VoiceManager.get_alena_config()
        
        assert config["name"] == "–ê–ª–µ–Ω–∞"
        assert "voice_id" in config
        assert "settings" in config
        assert config["settings"]["stability"] == 0.65
        assert config["settings"]["similarity_boost"] == 0.75
    
    def test_fallback_voices(self):
        """–¢–µ—Å—Ç —Ñ–æ–ª–ª–±—ç–∫ –≥–æ–ª–æ—Å–æ–≤"""
        voice = VoiceManager.get_fallback_voice(0)
        assert "voice_id" in voice
        assert "name" in voice
        
        # –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        voice = VoiceManager.get_fallback_voice(999)
        assert voice == VoiceManager.get_fallback_voice(0)


class TestAudioCache:
    """–¢–µ—Å—Ç—ã –∫—ç—à–∞ –∞—É–¥–∏–æ"""
    
    @pytest.fixture
    def cache(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –∫—ç—à–∞ –±–µ–∑ Redis"""
        return AudioCache(redis_client=None, cache_ttl=3600)
    
    @pytest.mark.asyncio
    async def test_memory_cache(self, cache):
        """–¢–µ—Å—Ç –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏"""
        text = "–ü—Ä–∏–≤–µ—Ç –æ—Ç –ê–ª–µ–Ω—ã!"
        voice_id = "test_voice"
        settings = {"stability": 0.5}
        audio_data = b"fake_audio_data"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—É—Å—Ç–æ
        cached = await cache.get(text, voice_id, settings)
        assert cached is None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await cache.set(text, voice_id, settings, audio_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º
        cached = await cache.get(text, voice_id, settings)
        assert cached == audio_data
    
    @pytest.mark.asyncio
    async def test_cache_key_uniqueness(self, cache):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π –∫—ç—à–∞"""
        text1, text2 = "–¢–µ–∫—Å—Ç 1", "–¢–µ–∫—Å—Ç 2" 
        voice_id = "voice"
        settings = {"stability": 0.5}
        
        key1 = cache._get_cache_key(text1, voice_id, settings)
        key2 = cache._get_cache_key(text2, voice_id, settings)
        
        assert key1 != key2
        
        # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã = –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–ª—é—á–∏
        key3 = cache._get_cache_key(text1, voice_id, settings)
        assert key1 == key3


class TestElevenLabsAdapter:
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    
    @pytest.fixture
    def mock_redis(self):
        """–ú–æ–∫ Redis –∫–ª–∏–µ–Ω—Ç–∞"""
        redis_mock = AsyncMock()
        redis_mock.get.return_value = None
        redis_mock.setex.return_value = True
        return redis_mock
    
    @pytest.fixture
    def fallback_provider(self):
        """–ú–æ–∫ —Ñ–æ–ª–ª–±—ç–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        provider = Mock()
        provider.synthesize = AsyncMock(return_value=b"fallback_audio")
        return provider
    
    @pytest.fixture
    def adapter(self, mock_redis, fallback_provider):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return ElevenLabsAdapter(
            api_key="test_key",
            redis_client=mock_redis,
            fallback_provider=fallback_provider,
            max_workers=1
        )
    
    def test_adapter_initialization(self, adapter):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        assert adapter.api_key == "test_key"
        assert adapter.max_workers == 1
        assert adapter.cache is not None
        assert adapter.voice_manager is not None
        assert not adapter.is_running
    
    def test_text_preprocessing(self, adapter):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        long_text = "–ê" * 3000
        processed = adapter._preprocess_text(long_text)
        assert len(processed) <= 2400
        assert processed.endswith("...")
        
        # –ó–∞–º–µ–Ω—ã
        text_with_symbols = "–¶–µ–Ω–∞ 100‚ÇΩ, 50% —Å–∫–∏–¥–∫–∞, ‚Ññ –∑–∞–∫–∞–∑–∞"
        processed = adapter._preprocess_text(text_with_symbols)
        assert "—Ä—É–±–ª–µ–π" in processed
        assert "–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤" in processed
        assert "–Ω–æ–º–µ—Ä" in processed
        
        # –≠–º–æ–¥–∑–∏
        text_with_emoji = "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ –¥–µ–ª–∞? üéâ"
        processed = adapter._preprocess_text(text_with_emoji)
        assert "üòä" not in processed
        assert "üéâ" not in processed
    
    def test_voice_id_resolution(self, adapter):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω –≥–æ–ª–æ—Å–æ–≤ –≤ ID"""
        # –ê–ª–µ–Ω–∞
        voice_id = adapter._resolve_voice_id("alena")
        alena_config = VoiceManager.get_alena_config()
        assert voice_id == alena_config["voice_id"]
        
        # ID –Ω–∞–ø—Ä—è–º—É—é
        direct_id = "direct_voice_id_12345"
        assert adapter._resolve_voice_id(direct_id) == direct_id
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å -> —Ñ–æ–ª–ª–±—ç–∫
        fallback_id = adapter._resolve_voice_id("unknown_voice")
        fallback_voice = VoiceManager.get_fallback_voice(0)
        assert fallback_id == fallback_voice["voice_id"]
    
    @pytest.mark.asyncio
    async def test_worker_lifecycle(self, adapter):
        """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ worker'–æ–≤"""
        assert not adapter.is_running
        assert len(adapter.workers) == 0
        
        # –ó–∞–ø—É—Å–∫
        await adapter.start_workers()
        assert adapter.is_running
        assert len(adapter.workers) == adapter.max_workers
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        await adapter.stop_workers()
        assert not adapter.is_running
    
    @pytest.mark.asyncio
    async def test_synthesis_with_cache_hit(self, adapter):
        """–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Å –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º –≤ –∫—ç—à"""
        text = "–ü—Ä–∏–≤–µ—Ç –æ—Ç –ê–ª–µ–Ω—ã!"
        cached_audio = b"cached_audio_data"
        
        # –ù–∞—Å—Ç—Ä–æ–∏–º –∫—ç—à –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        adapter.cache.get = AsyncMock(return_value=cached_audio)
        
        response = await adapter.synthesize_speech(text)
        
        assert response.audio_data == cached_audio
        assert response.cached == True
        assert response.voice_used == "alena"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = adapter.get_stats()
        assert stats["requests_total"] == 1
        assert stats["requests_cached"] == 1
    
    @pytest.mark.asyncio
    async def test_synthesis_api_success(self, adapter):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞"""
        text = "–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"
        mock_audio = b"mock_audio_response"
        
        # –ù–∞—Å—Ç—Ä–æ–∏–º –∫—ç—à –∫–∞–∫ –ø—É—Å—Ç–æ–π
        adapter.cache.get = AsyncMock(return_value=None)
        adapter.cache.set = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º HTTP –æ—Ç–≤–µ—Ç
        with patch('aiohttp.ClientSession') as mock_session:
            mock_response = AsyncMock()
            mock_response.status = 200
            mock_response.read.return_value = mock_audio
            
            mock_session.return_value.__aenter__.return_value.post.return_value.__aenter__.return_value = mock_response
            
            response = await adapter.synthesize_speech(text)
            
            assert response.audio_data == mock_audio
            assert not response.cached
            assert response.provider == "elevenlabs"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
            adapter.cache.set.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_synthesis_with_fallback(self, adapter):
        """–¢–µ—Å—Ç —Ñ–æ–ª–ª–±—ç–∫–∞ –Ω–∞ OpenAI –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        text = "–¢–µ—Å—Ç —Ñ–æ–ª–ª–±—ç–∫–∞"
        
        adapter.cache.get = AsyncMock(return_value=None)
        
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É API
        with patch('aiohttp.ClientSession') as mock_session:
            mock_session.return_value.__aenter__.side_effect = Exception("API Error")
            
            response = await adapter.synthesize_speech(text)
            
            # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ñ–æ–ª–ª–±—ç–∫
            assert response.audio_data == b"fallback_audio"
            assert response.provider == "openai_fallback"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ–ª–ª–±—ç–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            adapter.fallback_provider.synthesize.assert_called_once_with(text, "nova")
    
    @pytest.mark.asyncio
    async def test_api_error_handling(self, adapter):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ API"""
        text = "–¢–µ—Å—Ç –æ—à–∏–±–æ–∫"
        adapter.cache.get = AsyncMock(return_value=None)
        
        # –¢–µ—Å—Ç 429 Rate Limit
        with patch('aiohttp.ClientSession') as mock_session:
            mock_response = AsyncMock()
            mock_response.status = 429
            mock_response.text.return_value = "Rate limit exceeded"
            
            session_mock = mock_session.return_value.__aenter__.return_value
            session_mock.post.return_value.__aenter__.return_value = mock_response
            
            # –î–æ–ª–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
            with pytest.raises(ElevenLabsError):
                await adapter._process_tts_request(
                    TTSRequest(text=text, voice_id="test_voice")
                )
    
    @pytest.mark.asyncio
    async def test_get_voices(self, adapter):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤"""
        mock_voices = [
            {"voice_id": "voice1", "name": "Voice 1"},
            {"voice_id": "voice2", "name": "Voice 2"}
        ]
        
        with patch('aiohttp.ClientSession') as mock_session:
            mock_response = AsyncMock()
            mock_response.status = 200
            mock_response.json.return_value = {"voices": mock_voices}
            
            session_mock = mock_session.return_value.__aenter__.return_value
            session_mock.get.return_value.__aenter__.return_value = mock_response
            
            voices = await adapter.get_voices()
            assert voices == mock_voices
    
    def test_stats_tracking(self, adapter):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        initial_stats = adapter.get_stats()
        
        assert "requests_total" in initial_stats
        assert "requests_cached" in initial_stats
        assert "requests_failed" in initial_stats
        assert "queue_size" in initial_stats
        assert "workers_active" in initial_stats


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    @pytest.mark.asyncio
    async def test_create_adapter_factory(self):
        """–¢–µ—Å—Ç —Ñ–∞–±—Ä–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        mock_redis = AsyncMock()
        mock_fallback = Mock()
        
        adapter = await create_elevenlabs_adapter(
            api_key="test_key",
            redis_client=mock_redis,
            fallback_provider=mock_fallback,
            start_workers=False
        )
        
        assert isinstance(adapter, ElevenLabsAdapter)
        assert adapter.api_key == "test_key"
        assert not adapter.is_running  # workers –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
    
    @pytest.mark.asyncio
    async def test_full_synthesis_pipeline(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å–∏–Ω—Ç–µ–∑–∞"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pytest.skip("Requires real API key")
        
        adapter = await create_elevenlabs_adapter(
            api_key=os.getenv("ELEVENLABS_API_KEY"),
            start_workers=True
        )
        
        try:
            response = await adapter.synthesize_speech(
                "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–Ω–∞, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º.",
                voice="alena"
            )
            
            assert len(response.audio_data) > 0
            assert response.voice_used == "alena"
            
            stats = adapter.get_stats()
            assert stats["requests_total"] > 0
            
        finally:
            await adapter.stop_workers()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])