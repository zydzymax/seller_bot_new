"""
handlers.py ‚Äî Telegram Handlers –¥–ª—è SoVAni AI-–ø—Ä–æ–¥–∞–≤—Ü–∞ (–¥–≤–æ–π–Ω–∞—è LLM-–æ–±—Ä–∞–±–æ—Ç–∫–∞)
¬© SoVAni 2025
"""

import structlog
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram import Voice, Audio

logger = structlog.get_logger("ai_seller.handlers")

def setup_handlers(application, flow_manager, sanitizer, antiflood):
    # User message handler
    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_message = update.message.text or ""
        
        # –ê–Ω—Ç–∏—Ñ–ª—É–¥ ‚Äî –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        if await antiflood.is_limited(user_id):
            logger.info("antiflood_limit", user_id=user_id)
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ.")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è/–æ—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞ (XSS, prompt-injection)
        sanitized_message = sanitizer(user_message)
        if sanitized_message.startswith("‚ùóÔ∏è–ò–∑–≤–∏–Ω–∏—Ç–µ") or sanitized_message.startswith("[—É–¥–∞–ª–µ–Ω–æ]"):
            await update.message.reply_text(sanitized_message)
            return

        logger.info("user_message_received", user_id=user_id, length=len(sanitized_message))
        
        # –ì–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ (OpenAI -> Claude)
        try:
            reply = await flow_manager.process(user_id, sanitized_message, context)
        except Exception as e:
            logger.error("flow_manager_error", error=str(e))
            reply = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –º—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        max_retries = 3
        for attempt in range(max_retries):
            try:
                await update.message.reply_text(reply, disable_web_page_preview=True)
                break
            except Exception as e:
                logger.warning("telegram_send_error", attempt=attempt+1, error=str(e))
                if attempt == max_retries - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    try:
                        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
                    except:
                        pass
                else:
                    # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    import asyncio
                    await asyncio.sleep(2)

    # Voice message handler - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
    async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ê–Ω—Ç–∏—Ñ–ª—É–¥
        if await antiflood.is_limited(user_id):
            logger.info("antiflood_limit_voice", user_id=user_id)
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ.")
            return

        logger.info("voice_message_disabled", user_id=user_id)
        await update.message.reply_text("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")

    # Audio message handler - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
    async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ê–Ω—Ç–∏—Ñ–ª—É–¥  
        if await antiflood.is_limited(user_id):
            logger.info("antiflood_limit_audio", user_id=user_id)
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ.")
            return

        logger.info("audio_message_disabled", user_id=user_id)
        await update.message.reply_text("üéµ –ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")

    # Photo message handler
    async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ê–Ω—Ç–∏—Ñ–ª—É–¥
        if await antiflood.is_limited(user_id):
            logger.info("antiflood_limit_photo", user_id=user_id)
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ.")
            return

        logger.info("photo_message_received", user_id=user_id, photo_count=len(update.message.photo))
        
        try:
            # –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ flow_manager
            reply = await flow_manager.process_photo(user_id, update.message.photo, context)
        except Exception as e:
            logger.error("photo_flow_manager_error", error=str(e))
            reply = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        max_retries = 3
        for attempt in range(max_retries):
            try:
                await update.message.reply_text(reply, disable_web_page_preview=True)
                break
            except Exception as e:
                logger.warning("telegram_send_error", attempt=attempt+1, error=str(e))
                if attempt == max_retries - 1:
                    try:
                        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
                    except:
                        pass
                else:
                    import asyncio
                    await asyncio.sleep(2)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    application.add_handler(
        MessageHandler(filters.VOICE, handle_voice)
    )
    application.add_handler(
        MessageHandler(filters.AUDIO, handle_audio)
    )
    application.add_handler(
        MessageHandler(filters.PHOTO, handle_photo)
    )
